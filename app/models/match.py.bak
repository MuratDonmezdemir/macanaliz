# -*- coding: utf-8 -*-
from datetime import datetime
from enum import Enum
from typing import Optional, Dict, List, TYPE_CHECKING
from dataclasses import dataclass

from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Boolean, Text, Index, CheckConstraint
from sqlalchemy.dialects.postgresql import JSONB, ARRAY
from sqlalchemy.orm import relationship, backref, validates
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.sql import case, and_


from .base import BaseModel
from app.extensions import db
from app.utils.enums import MatchStatus, WeatherCondition

if TYPE_CHECKING:
    from .team import Team
    from .stadium import Stadium
    from .season import Season
    from .prediction import Prediction
    from .team_statistics import TeamStatistics
    from .match_event import MatchEvent
    from .match_lineup import MatchLineup
    from .match_substitution import MatchSubstitution
    from .match_card import MatchCard
    from .match_goal import MatchGoal

@dataclass
class MatchStatistics:
    """Maç istatistiklerini tutan veri sınıfı"""
    possession: float = 0.0  # Topla oynama yüzdesi
    shots: int = 0
    shots_on_target: int = 0
    shots_off_target: int = 0
    shots_blocked: int = 0
    shots_inside_box: int = 0
    shots_outside_box: int = 0
    passes: int = 0
    accurate_passes: int = 0
    pass_accuracy: float = 0.0
    crosses: int = 0
    accurate_crosses: int = 0
    long_balls: int = 0
    accurate_long_balls: int = 0
    through_balls: int = 0
    accurate_through_balls: int = 0
    tackles: int = 0
    interceptions: int = 0
    clearances: int = 0
    fouls: int = 0
    corners: int = 0
    offsides: int = 0
    yellow_cards: int = 0
    red_cards: int = 0
    saves: int = 0
    goal_kicks: int = 0
    throw_ins: int = 0
    free_kicks: int = 0
    duels_won: int = 0
    duels_total: int = 0
    aerial_duels_won: int = 0
    aerial_duels_total: int = 0
    dribbles_attempted: int = 0
    successful_dribbles: int = 0
    
    @property
    def duel_win_percentage(self) -> float:
        return (self.duels_won / self.duels_total * 100) if self.duels_total > 0 else 0.0
        
    @property
    def aerial_duel_win_percentage(self) -> float:
        return (self.aerial_duels_won / self.aerial_duels_total * 100) if self.aerial_duels_total > 0 else 0.0
        
    @property
    def dribble_success_rate(self) -> float:
        return (self.successful_dribbles / self.dribbles_attempted * 100) if self.dribbles_attempted > 0 else 0.0

class Match(BaseModel):
    """Futbol maçlarını temsil eden model.
    
    Attributes:
        home_team_id (int): Ev sahibi takım ID'si
        away_team_id (int): Deplasman takımı ID'si
        season_id (int): Sezon ID'si
        competition_id (int): Yarışma/Lig ID'si
        stadium_id (int, optional): Stadyum ID'si
        match_date (datetime): Maç tarihi ve saati
        status (MatchStatus): Maç durumu (SCHEDULED, FINISHED vb.)
        matchday (int, optional): Lig haftası
        stage (str, optional): Turnuva aşaması
        group (str, optional): Grup aşaması
        home_goals (int): Ev sahibi takımın attığı goller
        away_goals (int): Deplasman takımının attığı goller
        home_ht_goals (int, optional): İlk yarı ev sahibi golleri
        away_ht_goals (int, optional): İlk yarı deplasman golleri
        home_ft_goals (int, optional): İkinci yarı ev sahibi golleri
        away_ft_goals (int, optional): İkinci yarı deplasman golleri
        home_et_goals (int, optional): Uzatma devresi ev sahibi golleri
        away_et_goals (int, optional): Uzatma devresi deplasman golleri
        home_penalties (int, optional): Penaltı atışları ev sahibi golleri
        away_penalties (int, optional): Penaltı atışları deplasman golleri
        home_stats (dict): Ev sahibi takım istatistikleri (JSON)
        away_stats (dict): Deplasman takımı istatistikleri (JSON)
        weather (dict, optional): Hava durumu bilgileri (JSON)
        attendance (int, optional): Seyirci sayısı
        referee (str, optional): Hakem adı
        referee_nationality (str, optional): Hakem milliyeti
        assistant_referees (list, optional): Yardımcı hakemler
        fourth_official (str, optional): Dördüncü hakem
        is_derby (bool): Derbi maçı mı?
        is_tv (bool): Televizyonda yayınlanacak mı?
        broadcasters (list, optional): Yayıncı kuruluşlar
        odds (dict, optional): Bahis oranları (JSON)
        created_at (datetime): Oluşturulma tarihi
        updated_at (datetime): Son güncelleme tarihi
    """
    """
    __tablename__ = 'matches'
    __table_args__ = (
        # Bileşik indeksler
        db.Index('idx_matches_teams', 'home_team_id', 'away_team_id'),
        db.Index('idx_matches_date_league', 'match_date', 'competition_id'),
        db.Index('idx_matches_status', 'status'),
        db.Index('idx_matches_season', 'season_id'),
        db.Index('idx_matches_stadium', 'stadium_id'),
        
        # Kısıtlamalar
        db.CheckConstraint('home_team_id != away_team_id', name='check_teams_different'),
        db.CheckConstraint('match_date > created_at', name='check_match_date_after_creation'),
        db.CheckConstraint('home_goals >= 0', name='check_home_goals_positive'),
        db.CheckConstraint('away_goals >= 0', name='check_away_goals_positive'),
        db.CheckConstraint('home_ht_goals >= 0', name='check_home_ht_goals_positive'),
        db.CheckConstraint('away_ht_goals >= 0', name='check_away_ht_goals_positive'),
        db.CheckConstraint('home_ft_goals >= 0', name='check_home_ft_goals_positive'),
        db.CheckConstraint('away_ft_goals >= 0', name='check_away_ft_goals_positive'),
        db.CheckConstraint('home_et_goals >= 0', name='check_home_et_goals_positive'),
        db.CheckConstraint('away_et_goals >= 0', name='check_away_et_goals_positive'),
        db.CheckConstraint('home_penalties >= 0', name='check_home_penalties_positive'),
        db.CheckConstraint('away_penalties >= 0', name='check_away_penalties_positive'),
        
        # Tablo yorumu
        {'comment': 'Futbol maçlarının kaydedildiği tablo'}
    )
    
    id = db.Column(db.Integer, primary_key=True)
    
    # Temel bilgiler
    home_team_id = db.Column(db.Integer, db.ForeignKey('teams.id'), nullable=False, index=True)
    away_team_id = db.Column(db.Integer, db.ForeignKey('teams.id'), nullable=False, index=True)
    season_id = db.Column(db.Integer, db.ForeignKey('seasons.id'), nullable=False, index=True)
    competition_id = db.Column(db.Integer, db.ForeignKey('competitions.id'), nullable=False, index=True)
    stadium_id = db.Column(db.Integer, db.ForeignKey('stadiums.id'), nullable=True, index=True)
    
    # Maç bilgileri
    match_date = db.Column(db.DateTime, nullable=False, index=True)
    status = db.Column(db.Enum(MatchStatus), default=MatchStatus.SCHEDULED, nullable=False)
    matchday = db.Column(db.Integer, nullable=True, comment='Lig haftası')
    stage = db.Column(db.String(50), nullable=True, comment='Turnuva aşaması')
    group = db.Column(db.String(10), nullable=True, comment='Grup aşaması')
    
    # Skor bilgileri
    home_goals = db.Column(db.Integer, default=0, nullable=False)
    away_goals = db.Column(db.Integer, default=0, nullable=False)
    home_ht_goals = db.Column(db.Integer, default=0, nullable=True, comment='İlk yarı ev sahibi golleri')
    away_ht_goals = db.Column(db.Integer, default=0, nullable=True, comment='İlk yarı deplasman golleri')
    home_ft_goals = db.Column(db.Integer, default=0, nullable=True, comment='İkinci yarı ev sahibi golleri')
    away_ft_goals = db.Column(db.Integer, default=0, nullable=True, comment='İkinci yarı deplasman golleri')
    home_et_goals = db.Column(db.Integer, default=0, nullable=True, comment='Uzatma devresi ev sahibi golleri')
    away_et_goals = db.Column(db.Integer, default=0, nullable=True, comment='Uzatma devresi deplasman golleri')
    home_penalties = db.Column(db.Integer, default=0, nullable=True, comment='Penaltı atışları ev sahibi golleri')
    away_penalties = db.Column(db.Integer, default=0, nullable=True, comment='Penaltı atışları deplasman golleri')
    
    # İstatistikler (JSONB ile esnek yapı)
    home_stats = db.Column(JSONB, default=dict, nullable=False)
    away_stats = db.Column(JSONB, default=dict, nullable=False)
    
    # Hava durumu ve saha bilgileri
    weather = db.Column(JSONB, nullable=True, comment='Hava durumu bilgileri')
    attendance = db.Column(db.Integer, nullable=True, comment='Seyirci sayısı')
    
    # Hakem ve gözlemciler
    referee = db.Column(db.String(100), nullable=True)
    referee_nationality = db.Column(db.String(50), nullable=True)
    assistant_referees = db.Column(ARRAY(db.String(100)), nullable=True)
    fourth_official = db.Column(db.String(100), nullable=True)
    
    # Diğer bilgiler
    is_derby = db.Column(db.Boolean, default=False, nullable=False)
    is_tv = db.Column(db.Boolean, default=False, nullable=False)
    broadcasters = db.Column(ARRAY(db.String(100)), nullable=True, comment='Yayıncı kuruluşlar')
    odds = db.Column(JSONB, nullable=True, comment='Bahis oranları')
    
    # Zaman damgaları
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    
    # İlişkiler
    home_team = db.relationship(
        'Team',
        foreign_keys=[home_team_id],
        backref=db.backref('home_matches', lazy='dynamic', cascade='all, delete-orphan'),
        lazy='joined'
    )
    
    away_team = db.relationship(
        'Team',
        foreign_keys=[away_team_id],
        backref=db.backref('away_matches', lazy='dynamic', cascade='all, delete-orphan'),
        lazy='joined'
    )
    
    season = db.relationship(
        'Season',
        back_populates='matches',
        lazy='joined'
    )
    
    competition = db.relationship(
        'Competition',
        back_populates='matches',
        lazy='joined'
    )
    
    stadium = db.relationship(
        'Stadium',
        back_populates='matches',
        lazy='joined'
    )
    
    # Maç olayları (lazy loading ile performans optimizasyonu)
    events = db.relationship(
        'MatchEvent',
        back_populates='match',
        cascade='all, delete-orphan',
        lazy='dynamic',
        order_by='MatchEvent.minute, MatchEvent.extra_minute, MatchEvent.id'
    )
    
    lineups = db.relationship(
        'MatchLineup',
        back_populates='match',
        cascade='all, delete-orphan',
        lazy='dynamic'
    )
    
    goals = db.relationship(
        'MatchGoal',
        back_populates='match',
        cascade='all, delete-orphan',
        lazy='dynamic',
        order_by='MatchGoal.minute, MatchGoal.extra_minute, MatchGoal.id'
    )
    
    cards = db.relationship(
        'MatchCard',
        back_populates='match',
        cascade='all, delete-orphan',
        lazy='dynamic',
        order_by='MatchCard.minute, MatchCard.card_type'
    )
    
    substitutions = db.relationship(
        'MatchSubstitution',
        back_populates='match',
        cascade='all, delete-orphan',
        lazy='dynamic',
        order_by='MatchSubstitution.minute'
    )
    
    statistics = db.relationship(
        'MatchStatistics',
        back_populates='match',
        cascade='all, delete-orphan',
        lazy='dynamic',
        order_by='MatchStatistics.team_id'
    )
    
    # Tahminler
    predictions = db.relationship(
        'Prediction',
        back_populates='match',
        cascade='all, delete-orphan',
        lazy='dynamic',
        order_by='Prediction.created_at.desc()'
    )
    
    # Hibrit özellikler
    @hybrid_property
    def total_goals(self) -> int:
        """Toplam gol sayısını döndürür"""
        return (self.home_goals or 0) + (self.away_goals or 0)
    
    @hybrid_property
    def goal_difference(self) -> int:
        """Gol averajını döndürür"""
        return (self.home_goals or 0) - (self.away_goals or 0)
    
    @hybrid_property
    def is_over(self) -> bool:
        """Maçın bitip bitmediğini döndürür"""
        return self.status in [MatchStatus.FINISHED, MatchStatus.AWARDED, MatchStatus.CANCELED]
    
    @hybrid_property
    def is_in_play(self) -> bool:
        """Maçın oynanıp oynanmadığını döndürür"""
        return self.status in [MatchStatus.IN_PLAY, MatchStatus.PAUSED, MatchStatus.EXTRA_TIME, MatchStatus.PENALTY]
    
    # Doğrulama metodları
    @validates('home_team_id', 'away_team_id')
    def validate_teams(self, key, team_id):
        """Aynı takım kendisiyle oynayamaz"""
        if key == 'home_team_id' and hasattr(self, 'away_team_id') and team_id == self.away_team_id:
            raise ValueError("Bir takım kendisiyle maç yapamaz")
        if key == 'away_team_id' and hasattr(self, 'home_team_id') and team_id == self.home_team_id:
            raise ValueError("Bir takım kendisiyle maç yapamaz")
        return team_id
    
    @validates('match_date')
    def validate_match_date(self, key, match_date):
        """Maç tarihi geçmiş bir tarih olamaz"""
        if match_date < datetime.utcnow() - timedelta(days=1):  # 1 gün öncesine kadar izin ver
            raise ValueError("Maç tarihi geçmiş bir tarih olamaz")
        return match_date
    
    @validates('home_goals', 'away_goals', 'home_ht_goals', 'away_ht_goals', 
              'home_ft_goals', 'away_ft_goals', 'home_et_goals', 'away_et_goals',
              'home_penalties', 'away_penalties')
    def validate_goals(self, key, value):
        """Gol sayıları negatif olamaz"""
        if value is not None and value < 0:
            raise ValueError(f"{key} negatif olamaz")
        return value
    
    def to_dict(self, include_details: bool = False) -> dict:
        """Maç bilgilerini sözlük olarak döndürür"""
        result = {
            'id': self.id,
            'home_team_id': self.home_team_id,
            'away_team_id': self.away_team_id,
            'home_team': self.home_team.name if self.home_team else None,
            'away_team': self.away_team.name if self.away_team else None,
            'home_goals': self.home_goals,
            'away_goals': self.away_goals,
            'match_date': self.match_date.isoformat() if self.match_date else None,
            'status': self.status.value if hasattr(self.status, 'value') else self.status,
            'matchday': self.matchday,
            'stage': self.stage,
            'group': self.group,
            'stadium': self.stadium.name if self.stadium else None,
            'competition': self.competition.name if self.competition else None,
            'season': self.season.name if self.season else None,
            'is_derby': self.is_derby,
            'is_tv': self.is_tv,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
        
        if include_details:
            result.update({
                'home_stats': self.home_stats,
                'away_stats': self.away_stats,
                'weather': self.weather,
                'attendance': self.attendance,
                'referee': self.referee,
                'broadcasters': self.broadcasters,
                'odds': self.odds,
                'events': [event.to_dict() for event in self.events] if self.events else [],
                'lineups': [lineup.to_dict() for lineup in self.lineups] if self.lineups else [],
                'goals': [goal.to_dict() for goal in self.goals] if self.goals else [],
                'cards': [card.to_dict() for card in self.cards] if self.cards else [],
                'substitutions': [sub.to_dict() for sub in self.substitutions] if self.substitutions else [],
                'statistics': [stat.to_dict() for stat in self.statistics] if self.statistics else []
            })
        
        return result
    
    # Metodlar
    def update_score(self, home_goals: int, away_goals: int, is_ht: bool = False) -> None:
        """Maç skorunu günceller"""
        if is_ht:
            self.home_ht_goals = home_goals
            self.away_ht_goals = away_goals
        else:
            self.home_goals = home_goals
            self.away_goals = away_goals
            self.updated_at = datetime.utcnow()
    
    def get_winner_id(self) -> Optional[int]:
        """Kazanan takımın ID'sini döndürür"""
        if not self.is_over:
            return None
            
        if self.home_goals > self.away_goals:
            return self.home_team_id
        elif self.away_goals > self.home_goals:
            return self.away_team_id
        return None
    
    def get_loser_id(self) -> Optional[int]:
        """Kaybeden takımın ID'sini döndürür"""
        if not self.is_over:
            return None
            
        if self.home_goals < self.away_goals:
            return self.home_team_id
        elif self.away_goals < self.home_goals:
            return self.away_team_id
        return None
    
    def is_draw(self) -> bool:
        """Maçın berabere bitip bitmediğini döndürür"""
        return self.is_over and self.home_goals == self.away_goals
    
    def get_match_result(self) -> str:
        """Maç sonucunu string olarak döndürür (örn: '2-1')"""
        return f"{self.home_goals or 0}-{self.away_goals or 0}"
    
    def get_ht_result(self) -> str:
        """İlk yarı sonucunu string olarak döndürür (örn: '1-0')"""
        return f"{self.home_ht_goals or 0}-{self.away_ht_goals or 0}"
    
    def get_ft_result(self) -> str:
        """İkinci yarı sonucunu string olarak döndürür (örn: '1-1')"""
        return f"{self.home_ft_goals or 0}-{self.away_ft_goals or 0}"
    
    def get_et_result(self) -> str:
        """Uzatma devresi sonucunu string olarak döndürür (örn: '0-0')"""
        if self.home_et_goals is not None and self.away_et_goals is not None:
            return f"{self.home_et_goals}-{self.away_et_goals}"
        return ""
    
    def get_penalty_result(self) -> str:
        """Penaltı sonucunu string olarak döndürür (örn: '4-3')"""
        if self.home_penalties is not None and self.away_penalties is not None:
            return f"{self.home_penalties}-{self.away_penalties}"
        return ""
    
    def has_extra_time(self) -> bool:
        """Maçın uzatma süresi olup olmadığını döndürür"""
        return bool(self.home_et_goals is not None and self.away_et_goals is not None)
    
    def has_penalties(self) -> bool:
        """Maçın penaltılara gidip gitmediğini döndürür"""
        return bool(self.home_penalties is not None and self.away_penalties is not None)
    
    def get_match_winner(self) -> Optional[int]:
        """Maçı kazanan takımın ID'sini döndürür, berabere ise None"""
        if not self.is_over:
            return None
            
        if self.home_goals > self.away_goals:
            return self.home_team_id
        elif self.away_goals > self.home_goals:
            return self.away_team_id
        
        # Beraberlik durumunda uzatma veya penaltı kontrolü
        if self.has_extra_time():
            if self.home_et_goals > self.away_et_goals:
                return self.home_team_id
            elif self.away_et_goals > self.home_et_goals:
                return self.away_team_id
        
        if self.has_penalties():
            if self.home_penalties > self.away_penalties:
                return self.home_team_id
            elif self.away_penalties > self.home_penalties:
                return self.away_team_id
                
        return None  # Beraberlik veya belirsizlik durumu
    
    def get_team_stats(self, team_id: int) -> Optional[Dict]:
        """Takımın maç istatistiklerini döndürür"""
        if team_id == self.home_team_id:
            return self.home_stats
        elif team_id == self.away_team_id:
            return self.away_stats
        return None
    
    def get_opponent_stats(self, team_id: int) -> Optional[Dict]:
        """Rakip takımın maç istatistiklerini döndürür"""
        if team_id == self.home_team_id:
            return self.away_stats
        elif team_id == self.away_team_id:
            return self.home_stats
        return None
    
    def get_team_goals(self, team_id: int) -> Optional[int]:
        """Takımın attığı gol sayısını döndürür"""
        if team_id == self.home_team_id:
            return self.home_goals
        elif team_id == self.away_team_id:
            return self.away_goals
        return None
    
    def get_team_conceded(self, team_id: int) -> Optional[int]:
        """Takımın yediği gol sayısını döndürür"""
        if team_id == self.home_team_id:
            return self.away_goals
        elif team_id == self.away_team_id:
            return self.home_goals
        return None
    
    def get_team_result(self, team_id: int) -> Optional[str]:
        """Takımın maç sonucunu döndürür (W/D/L)"""
        if not self.is_over:
            return None
            
        if team_id == self.home_team_id:
            if self.home_goals > self.away_goals:
                return 'W'
            elif self.home_goals < self.away_goals:
                return 'L'
            else:
                return 'D'
        elif team_id == self.away_team_id:
            if self.away_goals > self.home_goals:
                return 'W'
            elif self.away_goals < self.home_goals:
                return 'L'
            else:
                return 'D'
        return None
        db.Integer, 
        db.ForeignKey('teams.id', ondelete='CASCADE'), 
        nullable=False,
        comment='Ev sahibi takım ID'
    )
    away_team_id = db.Column(
        db.Integer, 
        db.ForeignKey('teams.id', ondelete='CASCADE'), 
        nullable=False,
        comment='Deplasman takımı ID'
    )
    match_date = db.Column(
        db.DateTime, 
        nullable=False, 
        comment='Maç tarihi ve saati'
    )
    status = db.Column(
        db.String(20), 
        default=MatchStatus.SCHEDULED.value, 
        nullable=False,
        comment='Maç durumu (oynanmadı, devam ediyor, bitti vb.)'
    )
    matchday = db.Column(
        db.Integer, 
        comment='Ligdeki hafta veya tur numarası',
        index=True
    )
    stage = db.Column(
        db.String(50), 
        comment='Turnuva aşaması (grup aşaması, eleme turları vb.)',
        index=True
    )
    
    # Skor bilgileri
    home_score = db.Column(db.Integer, default=0)
    away_score = db.Column(db.Integer, default=0)
    half_time_home_score = db.Column(db.Integer)
    half_time_away_score = db.Column(db.Integer)
    extra_time_home_score = db.Column(db.Integer)
    extra_time_away_score = db.Column(db.Integer)
    penalty_home_score = db.Column(db.Integer)
    penalty_away_score = db.Column(db.Integer)
    
    # Diğer bilgiler
    stadium_id = db.Column(db.Integer, db.ForeignKey('stadiums.id'))
    season_id = db.Column(db.Integer, db.ForeignKey('seasons.id'), nullable=False)
    referee = db.Column(db.String(100))
    attendance = db.Column(db.Integer, comment='Seyirci sayısı')
    
    # Zaman damgaları
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    last_updated = db.Column(db.DateTime, comment='Son güncelleme zamanı')
    
    # İlişkiler
    stadium = db.relationship(
        'Stadium', 
        back_populates='matches',
        lazy='joined'
    )
    season = db.relationship(
        'Season', 
        back_populates='matches',
        lazy='joined'
    )
    
    home_team = db.relationship(
        'Team', 
        foreign_keys=[home_team_id], 
        back_populates='home_matches',
        lazy='joined'
    )
    
    away_team = db.relationship(
        'Team', 
        foreign_keys=[away_team_id], 
        back_populates='away_matches',
        lazy='joined'
    )
    
    predictions = db.relationship(
        'Prediction', 
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan',
        foreign_keys='Prediction.match_id'
    )
    
    statistics = db.relationship(
        'MatchStatistics',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan',
        foreign_keys='MatchStatistics.match_id',
        order_by='MatchStatistics.team_id'
    )
    
    # Yeni ilişkiler
    lineups = db.relationship(
        'MatchLineup',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan'
    )
    
    substitutions = db.relationship(
        'MatchSubstitution',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan'
    )
    
    cards = db.relationship(
        'MatchCard',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan'
    )
    
    goals = db.relationship(
        'MatchGoal',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan',
        order_by='MatchGoal.minute, MatchGoal.id'
    )
    
    # Events
    events = db.relationship(
        'MatchEvent',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan',
        order_by='MatchEvent.minute, MatchEvent.extra_minute, MatchEvent.id'
    )
    
    # Lineups
    lineups = db.relationship(
        'MatchLineup',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan'
    )
    
    # Substitutions
    substitutions = db.relationship(
        'MatchSubstitution',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan',
        order_by='MatchSubstitution.minute'
    )
    
    # Cards
    cards = db.relationship(
        'MatchCard',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan',
        order_by='MatchCard.minute, MatchCard.card_type'
    )
    
    # Goals
    goals = db.relationship(
        'MatchGoal',
        back_populates='match',
        lazy='dynamic',
        cascade='all, delete-orphan',
        order_by='MatchGoal.minute, MatchGoal.extra_minute, MatchGoal.id'
    )
    
    def __repr__(self):
        home_name = self.home_team.name if self.home_team else str(self.home_team_id)
        away_name = self.away_team.name if self.away_team else str(self.away_team_id)
        return f'<Match {home_name} {self.home_score}-{self.away_score} {away_name} ({self.match_date})>'
    
    def to_dict(self, include_details: bool = False) -> Dict[str, Any]:
        """Maç bilgilerini sözlük olarak döndürür
        
        Args:
            include_details: Detaylari da dahil etmek icin True yapin
            
        Returns:
            dict: Maç bilgilerini içeren sözlük
        """
        result = {
            'id': self.id,
            'home_team': self.home_team.to_dict() if self.home_team else None,
            'away_team': self.away_team.to_dict() if self.away_team else None,
            'match_date': self.match_date.isoformat() if self.match_date else None,
            'status': self.status,
            'matchday': self.matchday,
            'stage': self.stage,
            'home_score': self.home_score,
            'away_score': self.away_score,
            'half_time_score': f"{self.half_time_home_score or 0}-{self.half_time_away_score or 0}" 
                            if self.half_time_home_score is not None else None,
            'extra_time_score': f"{self.extra_time_home_score or 0}-{self.extra_time_away_score or 0}" 
                            if self.extra_time_home_score is not None else None,
            'penalty_score': f"{self.penalty_home_score or 0}-{self.penalty_away_score or 0}" 
                         if self.penalty_home_score is not None else None,
            'stadium': self.stadium.to_dict() if self.stadium else None,
            'season': self.season.to_dict() if self.season else None,
            'referee': self.referee,
            'attendance': self.attendance,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
            'last_updated': self.last_updated.isoformat() if self.last_updated else None
        }
        
        if include_details:
            result.update({
                'events': [e.to_dict() for e in self.events.all()],
                'lineups': [l.to_dict() for l in self.lineups.all()],
                'substitutions': [s.to_dict() for s in self.substitutions.all()],
                'cards': [c.to_dict() for c in self.cards.all()],
                'goals': [g.to_dict() for g in self.goals.all()],
                'statistics': {s.team_id: s.statistics for s in self.statistics}
            })
            
        return result
        
    @validates('home_team_id', 'away_team_id')
    def validate_teams(self, key, team_id):
        """Aynı takım kendisiyle oynayamaz"""
        if key == 'home_team_id' and hasattr(self, 'away_team_id') and team_id == self.away_team_id:
            raise ValueError("A takımı ve B takımı aynı olamaz")
        elif key == 'away_team_id' and hasattr(self, 'home_team_id') and team_id == self.home_team_id:
            raise ValueError("A takımı ve B takımı aynı olamaz")
        return team_id
    
    @property
    def is_finished(self) -> bool:
        """Maçın bitip bitmediğini döndürür"""
        return self.status == MatchStatus.FINISHED.value
    
    @property
    def is_in_play(self) -> bool:
        """Maçın oynanıp oynanmadığını döndürür"""
        return self.status in [MatchStatus.IN_PLAY.value, MatchStatus.PAUSED.value, 
                             MatchStatus.EXTRA_TIME.value, MatchStatus.PENALTY.value]
    
    @property
    def winner_id(self) -> Optional[int]:
        """Maçı kazanan takımın ID'sini döndürür, berabere ise None"""
        if not self.is_finished:
            return None
        if self.home_score > self.away_score:
            return self.home_team_id
        elif self.away_score > self.home_score:
            return self.away_team_id
        return None
    
    @property
    def loser_id(self) -> Optional[int]:
        """Maçı kaybeden takımın ID'sini döndürür, berabere ise None"""
        if not self.is_finished:
            return None
        if self.home_score < self.away_score:
            return self.home_team_id
        elif self.away_score < self.home_score:
            return self.away_team_id
        return None
    
    def get_team_score(self, team_id: int) -> Optional[int]:
        """Verilen takımın skorunu döndürür"""
        if team_id == self.home_team_id:
            return self.home_score
        elif team_id == self.away_team_id:
            return self.away_score
        return None
    
    def get_opponent_team_id(self, team_id: int) -> Optional[int]:
        """Verilen takımın rakibinin ID'sini döndürür"""
        if team_id == self.home_team_id:
            return self.away_team_id
        elif team_id == self.away_team_id:
            return self.home_team_id
        return None
    
    def get_prediction_for_user(self, user_id: int):
        """Kullanıcının bu maç için yaptığı tahmini döndürür"""
        return self.predictions.filter_by(user_id=user_id).first()


class MatchStatistics(BaseModel):
    """Maç istatistikleri modeli"""
    __tablename__ = 'match_statistics'
    
    id = db.Column(db.Integer, primary_key=True)
    match_id = db.Column(db.Integer, db.ForeignKey('matches.id', ondelete='CASCADE', name='fk_match_statistics_match'), nullable=False)
    team_id = db.Column(db.Integer, db.ForeignKey('teams.id', ondelete='CASCADE', name='fk_match_statistics_team'), nullable=False)
    statistics = db.Column(JSON, nullable=False, default=dict)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # İlişkiler
    match = db.relationship(
        'Match',
        back_populates='statistics',
        foreign_keys=[match_id]
    )
    team = db.relationship(
        'Team', 
        back_populates='match_statistics',
        foreign_keys=[team_id]
    )
    
    def __repr__(self):
        return f'<MatchStatistics {self.match_id} - Team {self.team_id}>'
    
    def to_dict(self):
        """İstatistikleri sözlük olarak döndürür"""
        return {
            'id': self.id,
            'match_id': self.match_id,
            'team_id': self.team_id,
            'statistics': self.statistics or {},
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }


class MatchStatus:
    pass